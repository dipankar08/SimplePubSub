#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var result_1 = require("../common/result");
var utils_1 = require("../common/utils");
var fs = require('fs');
var chalk = require('chalk');
var util = require('util');
var program = require('commander');
var namedRegexp = require("named-js-regexp");
var render = require('micromustache').render;
var uniqueString = require('unique-string');
var WebSocket = require('ws');
// global context
var Context = {};
function parseCommand() {
    var context = {};
    program
        .option('-s, --server <url>', 'server endpoints')
        .option('-f, --file <path>', 'path of the test file')
        .option('-l, --line <line_number>', 'It will execute that number only.')
        .parse(process.argv);
    context.file = program.file;
    context.server = program.server;
    // debug override
    // context.file = "/Users/dip/dipankar/node-fest/src/ws/sample.txt"
    return context;
}
var globalConnectionMap = new Map();
function connect(url) {
    var uid = uniqueString();
    return new Promise(function (resolve, reject) {
        var server = new WebSocket(url);
        server.onopen = function () {
            globalConnectionMap.set(uid, { ws: server, msg: [] });
            resolve(uid);
        };
        server.onerror = function (err) {
            reject(err);
        };
        server.onmessage = function (data) {
            var _a;
            (_a = globalConnectionMap.get(uid)) === null || _a === void 0 ? void 0 : _a.msg.push(data.data);
        };
        server.onclose = function () {
            console.log("onClose called");
            // globalConnectionMap.delete(uid)
        };
    });
}
// executing test case...
function runAllTestCase(testcase) {
    return __awaiter(this, void 0, void 0, function () {
        var result, _i, testcase_1, tc, _a, conn_id, err_1, con, err_2, con, err_3, con, msg, result1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    result = new result_1.Result();
                    _i = 0, testcase_1 = testcase;
                    _b.label = 1;
                case 1:
                    if (!(_i < testcase_1.length)) return [3 /*break*/, 19];
                    tc = testcase_1[_i];
                    // replace arguments
                    tc.arguments = tc.arguments.map(function (x) { return render(x, context); });
                    console.log(chalk.hex('#454545')(util.format("\n[%s] Executing: %s, %s", tc.line, tc.command, tc.arguments)));
                    _a = tc.command;
                    switch (_a) {
                        case 'sleep': return [3 /*break*/, 2];
                        case 'context': return [3 /*break*/, 4];
                        case 'connect': return [3 /*break*/, 5];
                        case 'disconnect': return [3 /*break*/, 9];
                        case 'send': return [3 /*break*/, 13];
                        case 'check_recv': return [3 /*break*/, 17];
                    }
                    return [3 /*break*/, 18];
                case 2:
                    console.log(chalk.blue(util.format('[%s][INFO] Sleeping %o', tc.line, tc.arguments[0])));
                    return [4 /*yield*/, utils_1.sleep(parseInt(tc.arguments[0]))];
                case 3:
                    _b.sent();
                    return [3 /*break*/, 18];
                case 4:
                    context[tc.arguments[0]] = tc.arguments[1];
                    console.log(chalk.blue(util.format('[%s][INFO] Context Set: now %s', tc.line, JSON.stringify(context))));
                    return [3 /*break*/, 18];
                case 5:
                    _b.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, connect(tc.arguments[0])];
                case 6:
                    conn_id = _b.sent();
                    context[tc.arguments[1]] = conn_id;
                    console.log(chalk.blue(util.format('[%s][INFO] Context Set: now %s', tc.line, JSON.stringify(context))));
                    result.markPass(tc);
                    return [3 /*break*/, 8];
                case 7:
                    err_1 = _b.sent();
                    result.markFail(tc, err_1.message);
                    return [3 /*break*/, 8];
                case 8: return [3 /*break*/, 18];
                case 9:
                    _b.trys.push([9, 11, , 12]);
                    con = globalConnectionMap.get(tc.arguments[0]);
                    utils_1.assert(con != undefined, "WS connecting doesn't exist");
                    con === null || con === void 0 ? void 0 : con.ws.close();
                    return [4 /*yield*/, utils_1.sleepMS(500)];
                case 10:
                    _b.sent();
                    result.markPass(tc);
                    return [3 /*break*/, 12];
                case 11:
                    err_2 = _b.sent();
                    result.markFail(tc, err_2.message);
                    return [3 /*break*/, 12];
                case 12: return [3 /*break*/, 18];
                case 13:
                    _b.trys.push([13, 15, , 16]);
                    con = globalConnectionMap.get(tc.arguments[0]);
                    utils_1.assert(con != undefined, "WS connecting doesn't exist");
                    con === null || con === void 0 ? void 0 : con.ws.send(tc.arguments[1]);
                    return [4 /*yield*/, utils_1.sleepMS(100)];
                case 14:
                    _b.sent();
                    result.markPass(tc);
                    return [3 /*break*/, 16];
                case 15:
                    err_3 = _b.sent();
                    result.markFail(tc, err_3.message);
                    return [3 /*break*/, 16];
                case 16: return [3 /*break*/, 18];
                case 17:
                    try {
                        con = globalConnectionMap.get(tc.arguments[0]);
                        utils_1.assert(con != undefined, "WS connecting doesn't exist");
                        utils_1.assert((con === null || con === void 0 ? void 0 : con.msg.length) != 0, "No message exist but expected:<" + tc.arguments[1] + ">");
                        msg = con.msg.shift();
                        result1 = utils_1.regexMatch(tc.arguments[1], msg);
                        if (result1) {
                            result.markPass(tc);
                        }
                        else {
                            throw Error("No message exist but expected:<" + tc.arguments[1] + ">, observed:<" + msg + ">");
                        }
                    }
                    catch (err) {
                        result.markFail(tc, err.message);
                    }
                    return [3 /*break*/, 18];
                case 18:
                    _i++;
                    return [3 /*break*/, 1];
                case 19:
                    result.printResult();
                    return [2 /*return*/];
            }
        });
    });
}
// building testcase from file.
function buildTestFromFile(filepath) {
    var contents = "";
    try {
        contents = fs.readFileSync(filepath, 'utf8');
    }
    catch (err) {
        throw new Error("[Error] You must pass the test-file path in the command like -f ./textcase.txt");
    }
    var lines = contents.split("\n");
    var result = Array();
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i].trim();
        if (line[0] == '#') {
            continue;
        }
        // trim the comments
        if (line.indexOf("#") != -1) {
            line = line.slice(0, line.indexOf("#")).trim();
        }
        if (line.length == 0) {
            continue;
        }
        var lineNo = i + 1;
        var args = line.split("=>").map(function (x) { return x.trim(); }).filter(function (y) { return y.length > 0; });
        var command = args[0];
        if (["context", "connect", "disconnect", "send", "check_recv", "sleep"].indexOf(command) == -1) {
            throw Error("Invalid Command found " + command);
        }
        result.push({
            line: lineNo,
            command: command,
            arguments: args.slice(1)
        });
    }
    if (result.length == 0) {
        throw Error("No test case found");
    }
    console.log(chalk.yellow(util.format("[INFO] Total test case found ", result.length)));
    return result;
}
// Main function
console.log('Starting API Test...');
var context = parseCommand();
var testCases = buildTestFromFile(context.file);
(function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        runAllTestCase(testCases);
        return [2 /*return*/];
    });
}); })();
//# sourceMappingURL=ws.js.map