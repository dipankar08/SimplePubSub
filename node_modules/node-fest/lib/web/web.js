#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require('fs');
var chalk = require('chalk');
var program = require('commander');
var render = require('micromustache').render;
require("./Extensions");
var _ = require("underscore");
var utils_1 = require("../common/utils");
var result_1 = require("../common/result");
var Browser_1 = require("./Browser");
// tokenize file:
var VALID_COAMMD = [
    'open',
    'wait',
    'verifyBodyText',
    'verifyNoBodyText',
    'verifyText',
    'click',
    'clickWaitVerify',
    'input',
    'inputWithEnter',
    'setAttr',
    'verifyAttr',
    'alert',
    'cookie',
    'reset',
    'switch',
    'verifyTitle',
    // network
    'network_get',
    'network_post'
];
function getContext() {
    program
        .option('-f, --file <path>', 'path of the test file')
        .option('-l, --line <line_number>', 'It will execute that number only.')
        .option('-hl, --headless <headless>', 'Run with headless browser')
        .option('-q, --quit <quit>', 'pass this argument if you want to quit the browner at end')
        .option('-b, --browser <browser>', 'Pass chrome or firefox')
        .parse(process.argv);
    // DEBUG ONLY
    // program.file = "/Users/dip/dipankar/node-fest/src/web/sample.txt"
    // program.browser ="firefox"
    // init with default
    var context = {
        line: program.line ? parseInt(program.line) : 0,
        headless: program.headless ? (program.headless == 'true') : true,
        quit: program.quit ? (program.quit == 'true') : true,
        file: program.file ? program.file : utils_1.assert(false, "You must pass a filepath like <-f hello.txt>"),
        browser: (program.browser == 'firefox') ? Browser_1.EBrowserType.Firefox : Browser_1.EBrowserType.Chrome,
    };
    // FOR DEBUG
    // context.headless = false
    // context.quit = false;
    return context;
}
function getTestCaseFromFile(file, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, lines, TestCaseList, testCase, i, line, key, value, commands, _i, commands_1, cmd, tokens, sCommand;
        return __generator(this, function (_a) {
            contents = fs.readFileSync(file, 'utf8');
            lines = contents.split("\n");
            TestCaseList = Array();
            testCase = null;
            for (i = 0; i < lines.length; i++) {
                line = lines[i];
                // fix the context
                line = render(line, context);
                //remove comments
                line = line.replace(/##.*/, "").trim();
                //empty line.
                if (line.length == 0) {
                    continue;
                }
                if (line.startsWith("$")) {
                    line = line.replace("$", "");
                    key = line.substring(0, line.indexOf("=")).trim();
                    value = line.substring(line.indexOf("=") + 1).trim();
                    console.log("Setting context for " + key + " => " + value);
                    context[key] = value;
                    continue;
                }
                if (line.endsWith("=>")) {
                    throw "Invalid Test input in line " + (i + 1) + " as the lines ends with =>";
                }
                if (!line.startsWith("=>")) {
                    // old test case
                    if (testCase != null) {
                        TestCaseList.push(testCase);
                    }
                    testCase = { lineNo: i + 1, commandList: [] };
                }
                // process command 
                if (testCase == null) {
                    throw "Syntax error while processing";
                }
                commands = line.split("=>");
                for (_i = 0, commands_1 = commands; _i < commands_1.length; _i++) {
                    cmd = commands_1[_i];
                    cmd = cmd.trim();
                    if (cmd.length == 0) {
                        continue;
                    }
                    tokens = cmd.split(",").map(function (x) { return x.trim(); });
                    if (tokens.length == 0) {
                        console.log(chalk.red("[" + (i + 1) + "]Invalid Token in " + cmd));
                        throw "Error";
                    }
                    if (!_.contains(VALID_COAMMD, tokens[0])) {
                        console.log(chalk.red("[" + (i + 1) + "] Invalid Commands found in =>" + tokens[0]));
                        throw "Error";
                    }
                    sCommand = {
                        line: i + 1,
                        name: tokens[0],
                        args: tokens.slice(1),
                        full_line: cmd,
                    };
                    testCase.commandList.push(sCommand);
                }
            }
            if (testCase != null) {
                TestCaseList.push(testCase);
            }
            if (program.line) {
                TestCaseList = TestCaseList.filter(function (x) { return x.lineNo >= program.line; });
            }
            console.log(chalk.blue("Building testcase complete for file. TestCase counts: cmd " + TestCaseList.length));
            return [2 /*return*/, TestCaseList];
        });
    });
}
function executeTestCase(TestCaseList, driver, context) {
    return __awaiter(this, void 0, void 0, function () {
        var result, _i, TestCaseList_1, tc, _a, _b, cmd1, args, _c, title, networkResp, err_1;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    result = new result_1.Result();
                    _i = 0, TestCaseList_1 = TestCaseList;
                    _d.label = 1;
                case 1:
                    if (!(_i < TestCaseList_1.length)) return [3 /*break*/, 48];
                    tc = TestCaseList_1[_i];
                    _d.label = 2;
                case 2:
                    _d.trys.push([2, 46, , 47]);
                    console.log(chalk.blue("[" + tc.lineNo + "] Executing test case ..."));
                    _a = 0, _b = tc.commandList;
                    _d.label = 3;
                case 3:
                    if (!(_a < _b.length)) return [3 /*break*/, 45];
                    cmd1 = _b[_a];
                    args = cmd1.args;
                    console.log(chalk.grey("[" + cmd1.line + "] Processing command: " + cmd1.full_line));
                    _c = cmd1.name;
                    switch (_c) {
                        case 'wait': return [3 /*break*/, 4];
                        case 'open': return [3 /*break*/, 6];
                        case 'verifyBodyText': return [3 /*break*/, 8];
                        case 'verifyNoBodyText': return [3 /*break*/, 10];
                        case 'verifyAttr': return [3 /*break*/, 12];
                        case 'setAttr': return [3 /*break*/, 14];
                        case 'verifyText': return [3 /*break*/, 16];
                        case 'verifyTitle': return [3 /*break*/, 18];
                        case 'click': return [3 /*break*/, 20];
                        case 'clickWaitVerify': return [3 /*break*/, 22];
                        case 'input': return [3 /*break*/, 26];
                        case 'inputWithEnter': return [3 /*break*/, 28];
                        case 'alert': return [3 /*break*/, 30];
                        case 'cookie': return [3 /*break*/, 32];
                        case 'reset': return [3 /*break*/, 34];
                        case 'switch': return [3 /*break*/, 36];
                        case 'network_get': return [3 /*break*/, 38];
                        case 'network_post': return [3 /*break*/, 40];
                    }
                    return [3 /*break*/, 42];
                case 4: return [4 /*yield*/, utils_1.sleepMS(parseInt(cmd1.args[0]))];
                case 5:
                    _d.sent();
                    return [3 /*break*/, 43];
                case 6:
                    if (args.length == 1) {
                        args.push("main");
                    }
                    return [4 /*yield*/, driver.open(cmd1.args[0], cmd1.args[1])];
                case 7:
                    _d.sent();
                    return [3 /*break*/, 43];
                case 8: return [4 /*yield*/, driver.verifyBodyText("body", cmd1.args[0])];
                case 9:
                    _d.sent();
                    console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    return [3 /*break*/, 43];
                case 10: return [4 /*yield*/, driver.verifyNoBodyText("body", cmd1.args[0])];
                case 11:
                    _d.sent();
                    console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    return [3 /*break*/, 43];
                case 12: return [4 /*yield*/, driver.assertAttr(cmd1.args[0], cmd1.args[1], cmd1.args.slice(2)[0])];
                case 13:
                    _d.sent();
                    console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    return [3 /*break*/, 43];
                case 14: return [4 /*yield*/, driver.setAttr(cmd1.args[0], cmd1.args[1], cmd1.args.slice(2)[0])];
                case 15:
                    _d.sent();
                    console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    return [3 /*break*/, 43];
                case 16: return [4 /*yield*/, driver.verifyBodyText(cmd1.args[0], cmd1.args.slice(1)[0])];
                case 17:
                    _d.sent();
                    console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    return [3 /*break*/, 43];
                case 18: return [4 /*yield*/, driver.getTitle()];
                case 19:
                    title = _d.sent();
                    utils_1.assert(title == args[0], "[" + cmd1.line + "] Failed! Expected:<" + args[0] + "> Observed: <" + title + ">");
                    console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    return [3 /*break*/, 43];
                case 20: return [4 /*yield*/, driver.doSingleClick(cmd1.args[0])];
                case 21:
                    _d.sent();
                    return [3 /*break*/, 43];
                case 22: return [4 /*yield*/, driver.doSingleClick(cmd1.args[0])];
                case 23:
                    _d.sent();
                    return [4 /*yield*/, utils_1.sleepMS(parseInt(cmd1.args[1]))];
                case 24:
                    _d.sent();
                    return [4 /*yield*/, driver.verifyBodyText("body", cmd1.args[2])];
                case 25:
                    _d.sent();
                    console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    return [3 /*break*/, 43];
                case 26: return [4 /*yield*/, driver.doType(cmd1.args[0], cmd1.args.slice(1)[0])];
                case 27:
                    _d.sent();
                    return [3 /*break*/, 43];
                case 28: return [4 /*yield*/, driver.doTypeEnter(cmd1.args[0], cmd1.args.slice(1)[0])];
                case 29:
                    _d.sent();
                    return [3 /*break*/, 43];
                case 30: return [4 /*yield*/, driver.doAlert(cmd1.args[0])];
                case 31:
                    _d.sent();
                    return [3 /*break*/, 43];
                case 32: return [4 /*yield*/, driver.cookie(cmd1.args[0], cmd1.args[1], cmd1.args[2])];
                case 33:
                    _d.sent();
                    if (cmd1.args[0] == 'verify') {
                        console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    }
                    return [3 /*break*/, 43];
                case 34: return [4 /*yield*/, driver.doReset()];
                case 35:
                    _d.sent();
                    return [3 /*break*/, 43];
                case 36: return [4 /*yield*/, driver.switchX(args[0])];
                case 37:
                    _d.sent();
                    return [3 /*break*/, 43];
                case 38: return [4 /*yield*/, utils_1.callNetwork('GET', cmd1.args[0], {})];
                case 39:
                    networkResp = _d.sent();
                    utils_1.assert(utils_1.regexMatch(cmd1.args[1], networkResp) != false, "[" + cmd1.line + "] Failed Expected: <" + cmd1.args[1] + "> Observed:<" + networkResp + ">");
                    console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    return [3 /*break*/, 43];
                case 40:
                    console.log(cmd1);
                    return [4 /*yield*/, utils_1.callNetwork('GET', cmd1.args[0], cmd1.arg[1])];
                case 41:
                    networkResp = _d.sent();
                    utils_1.assert(utils_1.regexMatch(cmd1.args[2], networkResp) != false, "[" + cmd1.line + "] Failed Expected: <" + cmd1.args[2] + "> Observed:<" + networkResp + ">");
                    console.log(chalk.green("[" + cmd1.line + "] Passed!"));
                    return [3 /*break*/, 43];
                case 42:
                    utils_1.assert(false, "[" + cmd1.line + "] Invalid command: <" + cmd1.name + ">");
                    _d.label = 43;
                case 43:
                    result.markPass();
                    _d.label = 44;
                case 44:
                    _a++;
                    return [3 /*break*/, 3];
                case 45: return [3 /*break*/, 47];
                case 46:
                    err_1 = _d.sent();
                    result.markFail();
                    console.log(chalk.red("[" + cmd1.line + "] Fail. Please fix me. Why? " + err_1));
                    throw err_1;
                case 47:
                    _i++;
                    return [3 /*break*/, 1];
                case 48:
                    console.log("Quit");
                    //await sleep(5000)
                    if (context.quit == true) {
                        driver.quit();
                    }
                    result.printResult();
                    return [2 /*return*/];
            }
        });
    });
}
// Main function 
(function () {
    return __awaiter(this, void 0, void 0, function () {
        var driver, context, testcase_list, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = null;
                    context = getContext();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 6, , 10]);
                    return [4 /*yield*/, getTestCaseFromFile(context.file, context)];
                case 2:
                    testcase_list = _a.sent();
                    return [4 /*yield*/, Browser_1.getWebDriver(context)];
                case 3:
                    // Process Textcase
                    //let browser: Browser = new Browser(context.browser);
                    //driver = browser.Initialize(context.headless)
                    driver = _a.sent();
                    return [4 /*yield*/, driver.manage().window().maximize()];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, executeTestCase(testcase_list, driver, context)];
                case 5:
                    _a.sent();
                    return [3 /*break*/, 10];
                case 6:
                    err_2 = _a.sent();
                    console.log(err_2);
                    if (!context.quit) return [3 /*break*/, 9];
                    if (!(context.headless == false)) return [3 /*break*/, 8];
                    return [4 /*yield*/, utils_1.sleep(3)];
                case 7:
                    _a.sent(); // 3 sec to check
                    _a.label = 8;
                case 8:
                    driver === null || driver === void 0 ? void 0 : driver.quit();
                    _a.label = 9;
                case 9: return [3 /*break*/, 10];
                case 10: return [2 /*return*/];
            }
        });
    });
})();
//# sourceMappingURL=web.js.map